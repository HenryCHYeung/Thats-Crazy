ALGORITHM:
1) Given use case (Production/Gaming), storage (500 GB/1 TB/2 TB), budget
FIND CHEAPEST PC AND USE IT AS BASELINE
2) IF PRODUCTION
	a) Find minimum GPU performance score
	b) Find cheapest CPU with performance score >= minimum GPU performance score
	c) Find cheapest GPU with performance score <= cheapest_CPU.performance_score AND
	   performance score >= cheapest_CPU.performance_score - 3500
   IF GAMING
	a) Find minimum CPU performance score
	b) Find cheapest GPU with performance score >= minimum CPU performance score
	c) Find cheapest CPU with performance score <= cheapest_GPU.performance_score AND
	   performance score >= cheapest_GPU.performance_score - 3500

3) Find cheapest PSU with wattage >= cheapest_CPU.TDP + cheapest_GPU.TDP
4) Find cheapest motherboard with socket = cheapest_CPU.socket
5) Find cheapest RAM with memory type = cheapest_motherboard.memory_type
6) Find cheapest storage with capacity = userInput(storage)
7) Find cheapest case
8) Set min_sum_of_price = sum of cheapest parts above
9) Record all storage with capacity = userInput(storage) into array storage[], ordered by price DESCENDING
10) Record all cases into array case[], ordered by price DESCENDING
11) Recommendation algorithm (Look at psuedo-code below)

PSUEDO-CODE
PRODUCTION:
	CPU:
		min_sum_of_others = min_sum_of_price - cheapest_CPU.price
		Find CPUs such that CPU.price <= budget - min_sum_of_others AND 
				    CPU.performance_score >= minimum GPU performance score,
		record in array CPU[] ordered by performance_score DESCENDING
		for CPU in CPU[]:
			Get a new list of GPUs that satisfy the conditions and does not exceed budget
			Get a new list of PSUs that satisfy the conditions and does not exceed budget (CPU + max(GPU.TDP) from above)
			Get a new list of motherboards that satisfy the conditions and does not exceed budget (CPU)
			Get a new list of RAMs that satisfy the conditions and does not exceed budget (DDR4 or both DDR4 and DDR5)
			// does not exceed budget means min_sum_of_others + current component <= budget
			If any list is empty (no component satisfies conditions), continue to next CPU in list
			GPU[] is ordered by performance score in descending order
			Everything else is ordered by price in descending order
			Recalculate min_sum_of_others using the new lists (includes the cheapest storage and case from before)
			if (CPU.price + min_sum_of_others > budget)	// the cheapest PC with selected CPU exceeds budget
				continue to next CPU in list
			if (CPU.TDP > 100) AND (CPU.price + min_sum_of_others + CPU_Cooler.price > budget)	
				continue to next CPU in list			// Adding cooler exceeds budget so don't add CPU
		
			min_sum_of_price = min_sum_of_others + CPU.price
			if (CPU.TDP > 100)
				min_sum_of_price += CPU_Cooler.price

			Right now min_sum_of_price uses the current CPU.price, but it uses the cheapest prices for everything else.
			The goal is to select better quality components for the other categories while still remaining in budget.
			Choose the best quality/most expensive part that satisfies the conditions. Since this is a production PC, the
			CPU is prioritized. Since CPU[] is already ordered by performance score in descending order, 
			we will simply choose the first one that meets all the requirements, even if we have to compromise the other
			parts for it.			
			
			selectedCPU = CPU
			break out of loop	// Select the first CPU that meets all the conditions above
		end for loop
		if (!selectedCPU) return "No PC available"	// if no CPU gets selected, no computer can be built
			
	GPU:
		min_sum_of_others = min_sum_of_price - cheapest_GPU.price	// Compare GPU prices
		for GPU in GPU[]	// Descending performance score
			if (GPU.price + min_sum_of_others > budget)
				continue to next GPU in list
			else break		// Find the best component that fits criteria
		min_sum_of_price = min_sum_of_others + GPU.price
		return GPU						// There will always be at least one suitable part
	PSU:								// for every component because of the lists above
		min_sum_of_others = min_sum_of_price - cheapest_PSU.price
		for PSU in PSU[]
			if (PSU.price + min_sum_of_others > budget)
				continue to next PSU in list
			else break
		min_sum_of_price = min_sum_of_others + PSU.price
		return PSU
	Motherboard:
		Same pattern as above
	RAM:
		Filter out the list above so that only the RAMs with memory type that matches the motherboard above is left
		Then execute pattern above
	Storage:
		Same pattern as above
	Case: 
		Same pattern as above

	GENERALIZED FUNCTION:
	function getSuitablePart(min_sum_of_price, cheapest_part.price, partList, budget)
		min_sum_of_others = min_sum_of_price - cheapest_part.price
		for part in partList
			if (part.price + min_sum_of_others > budget)
				continue to next part in list
			else break
		min_sum_of_price = min_sum_of_others + part.price	// min_sum_of_price may have to be a global variable
		return part
	
	Put all parts and their info into JSON, then send to frontend

GAMING:
	Mostly same as above except find GPU first instead of CPU
	Then keep in mind CPU Cooler when choosing CPU
	Everything after is the same